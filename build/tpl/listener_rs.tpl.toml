
[info]

uses = [
  "rtdlib::types as td_types",
  "crate::types as tg_types",
  "crate::api::Api",
]

comment_listener = "Telegram client event listener"
comment_lout = "Get listener"


# tt: listen handle type
# mapper: map tdlib type
# comment: listenr comment

[lin]

receive = { tt = { object = "Box<td_types::Object>" }, comment = "when receive data from tdlib" }

[lin.option]
td_type = "updateOption"
tt = { namespace = "tg_types", object = "TGUpdateOption"}
comment = "An option changed its value."

[lin.authorization_state]
td_type = "updateAuthorizationState"
tt = { namespace = "tg_types", object = "TGAuthorizationState" }
comment = "The user authorization state has changed."

[lin.connection_state]
td_type = "updateConnectionState"
tt = { namespace = "tg_types", object = "TGUpdateConnectionState" }
comment = "The connection state has changed."

[lin.error]
td_type = "error"
tt = { namespace = "td_types", object = "Error" }
comment = "An object of this type can be returned on every function call, in case of an error."

[lin.ok]
td_type = "ok"
tt = {}
comment = "An object of this type is returned on a successful function call for certain functions."

[lin.proxy]
td_type = "proxy"
tt = { namespace = "tg_types", object = "TGProxy" }
comment = "Contains information about a proxy server."

[lin.user]
td_type = "updateUser"
tt = { namespace = "tg_types", object = "TGUpdateUser" }
comment = "Represents a user. "

[lin.have_pending_notifications]
td_type = "updateHavePendingNotifications"
tt = { namespace = "td_types", object = "UpdateHavePendingNotifications" }
comment = "Describes, whether there are some pending notification updates. Can be used to prevent application from killing, while there are some pending notifications."

[lin.scope_notification_settings]
td_type = "updateScopeNotificationSettings"
tt = { namespace = "tg_types", object = "TGUpdateScopeNotificationSettings" }
comment = "Notification settings for some type of chats were updated."

[lin.user_status]
td_type = "updateUserStatus"
tt = { namespace = "tg_types", object = "TGUpdateUserStatus" }
comment = "The user went online or offline."

[lin.chat_read_inbox]
td_type = "updateChatReadInbox"
tt = { namespace = "td_types", object = "UpdateChatReadInbox" }
comment = "Incoming messages were read or number of unread messages has been changed."

[lin.chat_read_outbox]
td_type = "updateChatReadOutbox"
tt = { namespace = "td_types", object = "UpdateChatReadOutbox" }
comment = "Outgoing messages were read."

[lin.user_full_info]
td_type = "updateUserFullInfo"
tt = { namespace = "td_types", object = "UpdateUserFullInfo" }
comment = "Some data from"

[lin.new_chat]
td_type = "updateNewChat"
tt = { namespace = "tg_types", object = "TGUpdateNewChat" }
comment = "A new chat has been loaded/created. This update is guaranteed to come before the chat identifier is returned to the client. The chat field changes will be reported through separate updates."


[lin.chat_last_message]
td_type = "updateChatLastMessage"
tt = { namespace = "tg_types", object = "TGUpdateChatLastMessage" }
comment = "The last message of a chat was changed. If last_message is null then the last message in the chat became unknown. Some new unknown messages might be added to the chat in this case."

[lin.new_message]
td_type = "updateNewMessage"
tt = { namespace = "tg_types", object = "TGUpdateNewMessage" }
comment = "A new message was received; can also be an outgoing message."

[lin.delete_messages]
td_type = "updateDeleteMessages"
tt = { namespace = "tg_types", object = "TGUpdateDeleteMessages" }
comment = "Some messages were deleted."

[lin.file]
td_type = "file"
tt = { namespace = "tg_types", object = "TGFile" }
comment = "Represents a file."

[lin.update_file]
td_type = "updateFile"
tt = { namespace = "tg_types", object = "TGUpdateFile" }
comment = "Information about a file was updated."

[lin.message]
td_type = "message"
tt = { namespace = "tg_types", object = "TGMessage" }
comment = "Describes a message."

